import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Send, Brain, Trash2, RefreshCw, X, BookOpen, MessageSquare, Settings, HelpCircle } from 'lucide-react';

interface Message {
    id: number;
    sender: 'bot' | 'user';
    text: string;
    timestamp: Date;
}

interface LearningData {
    patterns: string[];
    responses: string[];
    context: Record<string, string>;
}

interface UserProfile {
    name: string;
    avatar: string;
}

const DEFAULT_PROFILE = "https://zermoser.github.io/mos_mini_ai_chat/images/user.png";

const ChatbotApp: React.FC = () => {
    const [messages, setMessages] = useState<Message[]>([
        {
            id: 1,
            sender: 'bot',
            text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ä‡∏ï‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á üòä ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏≠‡∏ô: [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì] > [‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£]"',
            timestamp: new Date()
        },
    ]);
    const [input, setInput] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const [learningData, setLearningData] = useState<LearningData>({
        patterns: [],
        responses: [],
        context: {}
    });
    const [showLearningPanel, setShowLearningPanel] = useState(false);
    const [userProfile, setUserProfile] = useState<UserProfile>({
        name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        avatar: DEFAULT_PROFILE
    });
    const [botProfile, setBotProfile] = useState({
        name: 'AI Assistant',
        avatar: 'https://zermoser.github.io/mos_mini_ai_chat/images/ai.png'
    });
    const [showSettings, setShowSettings] = useState(false);
    const [showHelp, setShowHelp] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å Local Storage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    useEffect(() => {
        const savedData = localStorage.getItem('chatbot_learning_data');
        if (savedData) {
            setLearningData(JSON.parse(savedData));
        }

        const savedProfile = localStorage.getItem('user_profile');
        if (savedProfile) {
            setUserProfile(JSON.parse(savedProfile));
        }
    }, []);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    useEffect(() => {
        localStorage.setItem('chatbot_learning_data', JSON.stringify(learningData));
        localStorage.setItem('user_profile', JSON.stringify(userProfile));
    }, [learningData, userProfile]);

    const scrollToBottom = useCallback(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, []);

    useEffect(() => {
        scrollToBottom();
    }, [messages, scrollToBottom]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
    const findLearnedResponse = useCallback((userMessage: string): string | null => {
        const lowerMsg = userMessage.toLowerCase();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        for (let i = 0; i < learningData.patterns.length; i++) {
            const pattern = learningData.patterns[i].toLowerCase();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á
            if (lowerMsg.includes(pattern)) {
                return learningData.responses[i];
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            if (pattern.startsWith('$')) {
                const commandPattern = pattern.slice(1);
                if (new RegExp(commandPattern, 'i').test(lowerMsg)) {
                    return learningData.responses[i];
                }
            }
        }

        return null;
    }, [learningData]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≠‡∏ô
    const processTeachCommand = useCallback((userMessage: string): string | null => {
        const teachPattern = /‡∏™‡∏≠‡∏ô[:Ôºö]\s*(.+?)\s*>\s*(.+)/i;
        const match = userMessage.match(teachPattern);

        if (match) {
            const pattern = match[1].trim();
            const response = match[2].trim();

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà
            setLearningData(prev => ({
                patterns: [...prev.patterns, pattern],
                responses: [...prev.responses, response],
                context: { ...prev.context }
            }));

            return `‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ "${pattern}" ‡∏ú‡∏°‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "${response}"`;
        }

        return null;
    }, []);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
    const processForgetCommand = useCallback((userMessage: string): string | null => {
        const forgetPattern = /‡∏•‡∏ö[:Ôºö]\s*(.+)/i;
        const match = userMessage.match(forgetPattern);

        if (match) {
            const patternToForget = match[1].trim().toLowerCase();
            let found = false;

            // ‡∏Å‡∏£‡∏≠‡∏á‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            const newPatterns = learningData.patterns.filter((pattern, index) => {
                if (pattern.toLowerCase().includes(patternToForget)) {
                    found = true;
                    // ‡∏•‡∏ö response ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢
                    learningData.responses.splice(index, 1);
                    return false;
                }
                return true;
            });

            if (found) {
                setLearningData(prev => ({
                    patterns: newPatterns,
                    responses: [...prev.responses].slice(0, newPatterns.length),
                    context: { ...prev.context }
                }));
                return `‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "${patternToForget}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!`;
            }
        }

        return null;
    }, [learningData]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
    const processLearningCommands = useCallback((userMessage: string): string | null => {
        const lowerMsg = userMessage.toLowerCase();

        if (lowerMsg.includes('‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') || lowerMsg.includes('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï')) {
            setLearningData({
                patterns: [],
                responses: [],
                context: {}
            });
            return '‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!';
        }

        if (lowerMsg.includes('‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ') || lowerMsg.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ')) {
            setShowLearningPanel(true);
            return '‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!';
        }

        return null;
    }, []);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏ô AI
    const generateRandomResponse = useCallback(() => {
        const randomReplies = [
            "‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°? ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡∏™‡∏≠‡∏ô: [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°] > [‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö]",
            "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ô‡∏±‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?",
            "‡∏ú‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡∏™‡∏≠‡∏ô: [‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠] > [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•]",
            "‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏™‡∏≠‡∏ô: [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°] > [‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£]",
            "‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?",
            "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô",
            "‡∏ß‡πâ‡∏≤‡∏ß! ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏•‡∏¢ ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö",
            "‡∏ú‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡∏™‡∏≠‡∏ô: [‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠] > [‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢]",
            "‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏Ñ‡∏£‡∏±‡∏ö!",
            "‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢"
        ];

        return randomReplies[Math.floor(Math.random() * randomReplies.length)];
    }, []);

    const generateBotResponse = useCallback((userMessage: string) => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≠‡∏ô
        const teachResponse = processTeachCommand(userMessage);
        if (teachResponse) return teachResponse;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö
        const forgetResponse = processForgetCommand(userMessage);
        if (forgetResponse) return forgetResponse;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        const learningCommandResponse = processLearningCommands(userMessage);
        if (learningCommandResponse) return learningCommandResponse;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏°‡∏≤
        const learnedResponse = findLearnedResponse(userMessage);
        if (learnedResponse) return learnedResponse;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        const lowerMsg = userMessage.toLowerCase();

        if (lowerMsg.includes("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ") || lowerMsg.includes("‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ") || lowerMsg.includes("hello")) {
            return `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ${userProfile.name}! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ä‡∏ï‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á üòä ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏≠‡∏ô: [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì] > [‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£]"`;
        } else if (lowerMsg.includes("‡∏≠‡∏≤‡∏´‡∏≤‡∏£") || lowerMsg.includes("‡∏Å‡∏¥‡∏ô") || lowerMsg.includes("‡∏´‡∏¥‡∏ß")) {
            return "‡∏´‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö? ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏î‡∏π‡πÑ‡∏´‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡πÄ‡∏°‡∏ô‡∏£‡πâ‡∏≠‡∏ô‡πÜ ‡∏Å‡πá‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡πà‡∏≤ üçú ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πá‡∏ö‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö";
        } else if (lowerMsg.includes("‡∏≠‡∏≤‡∏Å‡∏≤‡∏®") || lowerMsg.includes("‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®") || lowerMsg.includes("‡∏ù‡∏ô") || lowerMsg.includes("‡πÅ‡∏î‡∏î")) {
            return "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ñ‡πâ‡∏≤‡πÅ‡∏î‡∏î‡∏≠‡∏≠‡∏Å‡∏Å‡πá‡∏ô‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏ù‡∏ô‡∏ï‡∏Å‡∏Å‡πá‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏û‡∏Å‡∏£‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‚òî ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ñ‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡∏ö?";
        } else if (lowerMsg.includes("‡πÄ‡∏®‡∏£‡πâ‡∏≤") || lowerMsg.includes("‡πÄ‡∏´‡∏á‡∏≤") || lowerMsg.includes("‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î") || lowerMsg.includes("‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢")) {
            return "‡∏ú‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ü‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏ô‡∏∞ ‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠ üíñ";
        } else if (lowerMsg.includes("‡∏Ç‡∏≥") || lowerMsg.includes("‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å")) {
            return "‡∏á‡∏±‡πâ‡∏ô‡∏ü‡∏±‡∏á‡∏°‡∏∏‡∏Å‡∏ô‡∏µ‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö: ‡∏ó‡∏≥‡πÑ‡∏°‡∏ô‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ü‡∏ã‡∏ö‡∏∏‡πä‡∏Å? ...‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡πÉ‡∏ä‡πâ '‡∏ó‡∏ß‡∏µ‡∏ï' ‡πÑ‡∏á‡∏•‡πà‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! üê¶ ‡∏Æ‡πà‡∏≤‡πÜ üòÑ";
        } else if (lowerMsg.includes("‡πÄ‡∏ß‡∏•‡∏≤") || lowerMsg.includes("‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á")) {
            const now = new Date();
            const timeString = now.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });
            return `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${timeString} ‡∏Ñ‡∏£‡∏±‡∏ö üïí ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏û‡∏±‡∏Å‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡∏ö‡πâ‡∏≤‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö`;
        } else if (lowerMsg.includes("‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£") || lowerMsg.includes("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß") || lowerMsg.includes("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£")) {
            return `‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ä‡∏ï‡∏ö‡∏≠‡∏ó‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö ${userProfile.name} üòä ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏´‡∏á‡∏≤ ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏≤‡∏¢ ‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠`;
        } else if (lowerMsg.includes("‡∏ä‡πà‡∏ß‡∏¢") || lowerMsg.includes("‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥") || lowerMsg.includes("‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤")) {
            return "‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏°‡∏≠ ‡∏•‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏û‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á üôè";
        } else {
            return generateRandomResponse();
        }
    }, [findLearnedResponse, generateRandomResponse, processForgetCommand, processLearningCommands, processTeachCommand, userProfile.name]);

    const handleSendMessage = useCallback(async (text: string) => {
        if (!text.trim()) return;

        const userMessage: Message = {
            id: Date.now(),
            sender: 'user',
            text: text.trim(),
            timestamp: new Date()
        };

        setMessages(prev => [...prev, userMessage]);
        setInput('');
        setIsTyping(true);

        // Simulate bot thinking time
        setTimeout(() => {
            const botResponse: Message = {
                id: Date.now() + 1,
                sender: 'bot',
                text: generateBotResponse(text),
                timestamp: new Date()
            };

            setMessages(prev => [...prev, botResponse]);
            setIsTyping(false);
        }, 800 + Math.random() * 1200);
    }, [generateBotResponse]);

    const formatTime = useCallback((date: Date) => {
        return date.toLocaleTimeString('th-TH', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }, []);

    const resetLearningData = useCallback(() => {
        setLearningData({
            patterns: [],
            responses: [],
            context: {}
        });

        const botResponse: Message = {
            id: Date.now() + 1,
            sender: 'bot',
            text: '‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏£‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏•‡∏¢ üòä',
            timestamp: new Date()
        };

        setMessages(prev => [...prev, botResponse]);
    }, []);

    const handleProfileUpdate = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setUserProfile(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const MessageBubble: React.FC<{ message: Message }> = ({ message }) => {
        return (
            <div className={`flex items-end space-x-2 transition-all duration-300 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                {message.sender === 'bot' && (
                    <div className="flex-shrink-0">
                        <img
                            src={botProfile.avatar}
                            alt="Bot"
                            className="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md"
                        />
                    </div>
                )}

                <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl shadow-sm transition-all duration-300 ${message.sender === 'user'
                    ? 'bg-gradient-to-r from-indigo-600 to-purple-700 text-white rounded-br-none'
                    : 'bg-white text-gray-800 rounded-bl-none border border-gray-100'
                    }`}>
                    <p className="text-sm whitespace-pre-wrap" dangerouslySetInnerHTML={{ __html: message.text }} />
                    <p className={`text-xs mt-1 ${message.sender === 'user' ? 'text-indigo-200' : 'text-gray-500'}`}>
                        {formatTime(message.timestamp)}
                    </p>
                </div>

                {message.sender === 'user' && (
                    <div className="flex-shrink-0">
                        <img
                            src={userProfile.avatar}
                            alt="User"
                            className="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md"
                        />
                    </div>
                )}
            </div>
        );
    };

    const LearningPanel = () => (
        <div className="absolute top-0 left-0 w-full h-full bg-white z-10 p-4 overflow-y-auto animate-slideIn">
            <div className="flex justify-between items-center mb-6 sticky top-0 bg-white py-4">
                <h2 className="text-xl font-bold text-gray-800 flex items-center">
                    <BookOpen className="mr-2 text-indigo-600" size={20} />
                    ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
                </h2>
                <button
                    onClick={() => setShowLearningPanel(false)}
                    className="p-2 rounded-full hover:bg-gray-100 transition-colors"
                >
                    <X size={20} className="text-gray-600" />
                </button>
            </div>

            <div className="mb-6 p-4 bg-indigo-50 rounded-xl border border-indigo-100">
                <h3 className="font-semibold text-indigo-800 mb-3 flex items-center">
                    <RefreshCw className="mr-2" size={16} />
                    ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≠‡∏ô AI
                </h3>
                <p className="text-sm text-gray-700 mb-3">
                    ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô AI ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
                </p>
                <div className="bg-gray-800 text-indigo-300 p-3 rounded-lg text-sm font-mono mb-3">
                    ‡∏™‡∏≠‡∏ô: [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠] &gt; [‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£]
                </div>
                <p className="text-sm text-gray-700 mb-2">
                    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
                </p>
                <div className="bg-white p-3 rounded-lg text-sm mb-3 border border-indigo-200 shadow-sm">
                    <span className="font-semibold text-indigo-700">‡∏™‡∏≠‡∏ô:</span> ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ &gt; ‡∏£‡πâ‡∏≤‡∏ô‡∏™‡πâ‡∏°‡∏ï‡∏≥‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≠‡∏™‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å!
                </div>
                <div className="bg-white p-3 rounded-lg text-sm border border-indigo-200 shadow-sm">
                    <span className="font-semibold text-indigo-700">‡∏™‡∏≠‡∏ô:</span> ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ &gt; ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á?
                </div>
            </div>

            <div className="mb-6">
                <div className="flex justify-between items-center mb-4">
                    <h3 className="font-semibold text-gray-800">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({learningData.patterns.length})</h3>
                    <button
                        onClick={resetLearningData}
                        className="text-sm bg-gradient-to-r from-red-500 to-red-600 text-white px-4 py-2 rounded-full flex items-center hover:opacity-90 transition-opacity shadow-md"
                    >
                        <Trash2 size={16} className="mr-1" />
                        ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    </button>
                </div>

                {learningData.patterns.length === 0 ? (
                    <div className="text-center py-8 text-gray-500 bg-gray-50 rounded-xl border border-dashed border-gray-200">
                        <Brain className="mx-auto mb-3 text-gray-300" size={32} />
                        <p className="text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ</p>
                        <p className="text-sm mt-2 text-gray-400">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≠‡∏ô AI ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏™‡∏≠‡∏ô: [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°] `{'>'}` [‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö]"</p>
                    </div>
                ) : (
                    <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
                        {learningData.patterns.map((pattern, index) => (
                            <div key={index} className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow">
                                <div className="font-semibold text-indigo-600 mb-1">{pattern}</div>
                                <div className="text-gray-700 bg-indigo-50 p-2 rounded-lg">{learningData.responses[index]}</div>
                            </div>
                        ))}
                    </div>
                )}
            </div>

            <div className="text-xs text-gray-500 text-center p-4 bg-gray-50 rounded-xl">
                <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏î‡πÜ</p>
                <p className="mt-1">‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ</p>
            </div>
        </div>
    );

    const SettingsPanel = () => (
        <div className="absolute top-0 left-0 w-full h-full bg-white z-10 p-4 overflow-y-auto animate-slideIn">
            <div className="flex justify-between items-center mb-6 sticky top-0 bg-white py-4">
                <h2 className="text-xl font-bold text-gray-800 flex items-center">
                    <Settings className="mr-2 text-indigo-600" size={20} />
                    ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                </h2>
                <button
                    onClick={() => setShowSettings(false)}
                    className="p-2 rounded-full hover:bg-gray-100 transition-colors"
                >
                    <X size={20} className="text-gray-600" />
                </button>
            </div>

            <div className="mb-6">
                <h3 className="font-semibold text-gray-800 mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h3>

                <div className="flex flex-col items-center mb-6">
                    <div className="relative mb-3">
                        <img
                            src={userProfile.avatar}
                            alt="User"
                            className="w-24 h-24 rounded-full object-cover border-4 border-indigo-100 shadow-lg"
                        />
                        <button
                            className="absolute bottom-0 right-0 bg-indigo-600 text-white p-2 rounded-full shadow-md"
                            onClick={() => {
                                const newAvatar = prompt('‡∏Å‡∏£‡∏≠‡∏Å URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå', userProfile.avatar);
                                if (newAvatar) {
                                    setUserProfile(prev => ({ ...prev, avatar: newAvatar }));
                                }
                            }}
                        >
                            <RefreshCw size={16} />
                        </button>
                    </div>

                    <div className="w-full max-w-xs">
                        <label className="block text-sm font-medium text-gray-700 mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</label>
                        <input
                            type="text"
                            name="name"
                            value={userProfile.name}
                            onChange={handleProfileUpdate}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        />
                    </div>
                </div>
            </div>

            <div className="mb-6">
                <h3 className="font-semibold text-gray-800 mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ï‡∏ö‡∏≠‡∏ó</h3>

                <div className="flex flex-col items-center mb-6">
                    <div className="relative mb-3">
                        <img
                            src={botProfile.avatar}
                            alt="Bot"
                            className="w-24 h-24 rounded-full object-cover border-4 border-indigo-100 shadow-lg"
                        />
                        <button
                            className="absolute bottom-0 right-0 bg-indigo-600 text-white p-2 rounded-full shadow-md"
                            onClick={() => {
                                const newAvatar = prompt('‡∏Å‡∏£‡∏≠‡∏Å URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏≠‡∏ó', botProfile.avatar);
                                if (newAvatar) {
                                    setBotProfile(prev => ({ ...prev, avatar: newAvatar }));
                                }
                            }}
                        >
                            <RefreshCw size={16} />
                        </button>
                    </div>

                    <div className="w-full max-w-xs">
                        <label className="block text-sm font-medium text-gray-700 mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó</label>
                        <input
                            type="text"
                            value={botProfile.name}
                            onChange={(e) => setBotProfile(prev => ({ ...prev, name: e.target.value }))}
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        />
                    </div>
                </div>
            </div>

            <div className="text-xs text-gray-500 text-center p-4 bg-gray-50 rounded-xl">
                <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏î‡πÜ</p>
            </div>
        </div>
    );

    const HelpPanel = () => (
        <div className="absolute top-0 left-0 w-full h-full bg-white z-10 p-4 overflow-y-auto animate-slideIn">
            <div className="flex justify-between items-center mb-6 sticky top-0 bg-white py-4">
                <h2 className="text-xl font-bold text-gray-800 flex items-center">
                    <HelpCircle className="mr-2 text-indigo-600" size={20} />
                    ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                </h2>
                <button
                    onClick={() => setShowHelp(false)}
                    className="p-2 rounded-full hover:bg-gray-100 transition-colors"
                >
                    <X size={20} className="text-gray-600" />
                </button>
            </div>

            <div className="mb-6">
                <h3 className="font-semibold text-gray-800 mb-3 flex items-center">
                    <MessageSquare className="mr-2 text-indigo-500" size={18} />
                    ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö AI
                </h3>
                <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-100 mb-4">
                    <p className="text-sm text-gray-700">
                        ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö AI ‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏™‡πà‡∏á
                    </p>
                </div>
            </div>

            <div className="mb-6">
                <h3 className="font-semibold text-gray-800 mb-3 flex items-center">
                    <BookOpen className="mr-2 text-indigo-500" size={18} />
                    ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô AI
                </h3>
                <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-100 mb-4">
                    <p className="text-sm text-gray-700 mb-2">
                        ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô AI ‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:
                    </p>
                    <div className="bg-gray-800 text-indigo-300 p-3 rounded-lg text-sm font-mono mb-2">
                        ‡∏™‡∏≠‡∏ô: [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠] &gt; [‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£]
                    </div>
                    <p className="text-sm text-gray-700">
                        ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: <span className="font-mono bg-white p-1 rounded">‡∏™‡∏≠‡∏ô: ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏Ñ‡∏£ &gt; ‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô AI</span>
                    </p>
                </div>
            </div>

            <div className="mb-6">
                <h3 className="font-semibold text-gray-800 mb-3 flex items-center">
                    <Trash2 className="mr-2 text-indigo-500" size={18} />
                    ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
                </h3>
                <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-100">
                    <p className="text-sm text-gray-700 mb-2">
                        ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ú‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
                    </p>
                    <p className="text-sm text-gray-700">
                        ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: <span className="font-mono bg-white p-1 rounded">‡∏•‡∏ö: [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö]</span> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
                    </p>
                </div>
            </div>

            <div className="text-xs text-gray-500 text-center p-4 bg-gray-50 rounded-xl">
                <p>‡πÅ‡∏ä‡∏ï‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï</p>
            </div>
        </div>
    );

    return (
        <div className="max-w-md mx-auto h-screen flex flex-col bg-gradient-to-br from-indigo-50 to-purple-50 relative font-sans">
            {/* Header */}
            <div className="bg-gradient-to-r from-indigo-600 to-purple-700 text-white p-4 flex items-center space-x-3 shadow-lg">
                <div className="relative flex-shrink-0">
                    <img
                        src={botProfile.avatar}
                        alt="Bot"
                        className="w-12 h-12 rounded-full object-cover border-2 border-white shadow-md"
                    />
                    <div className="absolute bottom-0 right-0 w-3 h-3 bg-green-400 rounded-full border-2 border-white"></div>
                </div>
                <div className="flex-1 min-w-0">
                    <h1 className="font-bold text-lg truncate">{botProfile.name}</h1>
                    <p className="text-xs opacity-80 flex items-center truncate">
                        <span className="w-2 h-2 bg-green-400 rounded-full mr-1"></span>
                        ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå - ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                    </p>
                </div>
                <div className="flex space-x-1">
                    <button
                        onClick={() => setShowHelp(true)}
                        className="p-2 rounded-full hover:bg-indigo-500 transition-colors"
                        title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"
                    >
                        <HelpCircle size={20} className="text-white" />
                    </button>
                    <button
                        onClick={() => setShowSettings(true)}
                        className="p-2 rounded-full hover:bg-indigo-500 transition-colors"
                        title="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"
                    >
                        <Settings size={20} className="text-white" />
                    </button>
                </div>
            </div>

            {/* Messages Container */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gradient-to-b from-white to-indigo-50">
                {messages.map((msg) => (
                    <MessageBubble key={msg.id} message={msg} />
                ))}

                {/* Typing Indicator */}
                {isTyping && (
                    <div className="flex items-end space-x-2 justify-start animate-pulse">
                        <div className="flex-shrink-0">
                            <img
                                src={botProfile.avatar}
                                alt="Bot"
                                className="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md"
                            />
                        </div>
                        <div className="bg-white px-4 py-2 rounded-2xl rounded-bl-none border border-gray-100 shadow-sm">
                            <div className="flex space-x-1">
                                <div className="w-2 h-2 bg-indigo-400 rounded-full animate-bounce"></div>
                                <div className="w-2 h-2 bg-indigo-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                                <div className="w-2 h-2 bg-indigo-400 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                            </div>
                        </div>
                    </div>
                )}

                <div ref={messagesEndRef} />
            </div>

            {/* Learning Panel */}
            {showLearningPanel && <LearningPanel />}

            {/* Settings Panel */}
            {showSettings && <SettingsPanel />}

            {/* Help Panel */}
            {showHelp && <HelpPanel />}

            {/* Input Section */}
            <div className="p-4 bg-white border-t border-gray-200 shadow-lg">
                <div className="flex items-center space-x-2">
                    <input
                        type="text"
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        onKeyDown={(e) => {
                            if (e.key === 'Enter') {
                                e.preventDefault();
                                handleSendMessage(input);
                            }
                        }}
                        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≠‡∏ô AI..."
                        className="flex-1 px-4 py-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent shadow-inner"
                        disabled={isTyping}
                    />
                    <button
                        onClick={() => handleSendMessage(input)}
                        disabled={!input.trim() || isTyping}
                        className="p-3 bg-gradient-to-r from-indigo-600 to-purple-700 text-white rounded-full hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed transition-opacity duration-200 shadow-lg flex-shrink-0"
                    >
                        <Send size={20} />
                    </button>
                </div>

                <div className="mt-3 flex justify-between items-center">
                    <div className="flex items-center">
                        <span className="bg-indigo-100 text-indigo-700 text-xs px-3 py-1 rounded-full">
                            {learningData.patterns.length} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
                        </span>
                    </div>

                    <div className="flex space-x-2">
                        <button
                            onClick={() => setShowLearningPanel(true)}
                            className="text-xs text-indigo-600 hover:text-indigo-800 flex items-center bg-indigo-50 px-3 py-1 rounded-full"
                        >
                            <BookOpen size={14} className="mr-1" /> ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
                        </button>
                        <button
                            onClick={() => setShowHelp(true)}
                            className="text-xs text-indigo-600 hover:text-indigo-800 flex items-center bg-indigo-50 px-3 py-1 rounded-full"
                        >
                            <HelpCircle size={14} className="mr-1" /> ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ChatbotApp;